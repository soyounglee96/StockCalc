//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 템플릿에서 생성되었습니다.
//
//     이 파일을 수동으로 변경하면 응용 프로그램에서 예기치 않은 동작이 발생할 수 있습니다.
//     이 파일을 수동으로 변경하면 코드가 다시 생성될 때 변경 내용을 덮어씁니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StockCalc.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StockCalcEntities1 : DbContext
    {
        public StockCalcEntities1()
            : base("name=StockCalcEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Price> Prices { get; set; }
        public virtual DbSet<Result> Results { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<Strategy> Strategies { get; set; }
        public virtual DbSet<Trade> Trades { get; set; }
    
        public virtual int InsertNotExist(Nullable<System.DateTime> date, string stockId, Nullable<double> close, Nullable<double> pER, Nullable<double> stockHolding, Nullable<double> marketCap)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var stockIdParameter = stockId != null ?
                new ObjectParameter("StockId", stockId) :
                new ObjectParameter("StockId", typeof(string));
    
            var closeParameter = close.HasValue ?
                new ObjectParameter("Close", close) :
                new ObjectParameter("Close", typeof(double));
    
            var pERParameter = pER.HasValue ?
                new ObjectParameter("PER", pER) :
                new ObjectParameter("PER", typeof(double));
    
            var stockHoldingParameter = stockHolding.HasValue ?
                new ObjectParameter("StockHolding", stockHolding) :
                new ObjectParameter("StockHolding", typeof(double));
    
            var marketCapParameter = marketCap.HasValue ?
                new ObjectParameter("MarketCap", marketCap) :
                new ObjectParameter("MarketCap", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNotExist", dateParameter, stockIdParameter, closeParameter, pERParameter, stockHoldingParameter, marketCapParameter);
        }
    }
}
